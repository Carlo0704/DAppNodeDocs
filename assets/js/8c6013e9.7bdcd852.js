"use strict";(self.webpackChunkd_app_node_docs=self.webpackChunkd_app_node_docs||[]).push([[6110],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(4137));const o={},i="GitHub Actions for Dappnode Packages",s={unversionedId:"dev/github-actions",id:"dev/github-actions",title:"GitHub Actions for Dappnode Packages",description:"GitHub Actions help automate workflows around your projects on GitHub. For Dappnode packages, we utilize specific GitHub Actions to manage updates and releases.",source:"@site/docs/dev/github-actions.md",sourceDirName:"dev",slug:"/dev/github-actions",permalink:"/DAppNodeDocs/docs/dev/github-actions",draft:!1,editUrl:"https://github.com/dappnode/DappnodeDocs/docs/dev/github-actions.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"Wizard Reference",permalink:"/DAppNodeDocs/docs/dev/references/setup-wizard"}},l={},p=[{value:"1. Auto Check for Upstream Updates (<code>auto_check.yml</code>)",id:"1-auto-check-for-upstream-updates-auto_checkyml",level:2},{value:"Workflow File:",id:"workflow-file",level:3},{value:"2. Main Build and Pre-release (<code>main.yml</code>)",id:"2-main-build-and-pre-release-mainyml",level:2},{value:"Workflow File:",id:"workflow-file-1",level:3}],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"github-actions-for-dappnode-packages"},"GitHub Actions for Dappnode Packages"),(0,r.kt)("p",null,"GitHub Actions help automate workflows around your projects on GitHub. For Dappnode packages, we utilize specific GitHub Actions to manage updates and releases."),(0,r.kt)("h2",{id:"1-auto-check-for-upstream-updates-auto_checkyml"},"1. Auto Check for Upstream Updates (",(0,r.kt)("inlineCode",{parentName:"h2"},"auto_check.yml"),")"),(0,r.kt)("p",null,"This action checks if there's an available update from the upstream repository. If an update is found, it creates a Pull Request with the new version."),(0,r.kt)("h3",{id:"workflow-file"},"Workflow File:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Filename:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"auto_check.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Bump upstream version\n\non:\n  schedule:\n    - cron: "00 */4 * * *"\n  push:\n    branches:\n      - "master"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx @dappnode/dappnodesdk github-action bump-upstream\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PINATA_API_KEY: ${{ secrets.PINATA_API_KEY }}\n          PINATA_SECRET_API_KEY: ${{ secrets.PINATA_SECRET_API_KEY }}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Features:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scheduled Runs"),": The action runs every 4 hours (as per the cron setting)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Environment Variables"),": Uses ",(0,r.kt)("inlineCode",{parentName:"li"},"GITHUB_TOKEN")," for authentication, and ",(0,r.kt)("inlineCode",{parentName:"li"},"PINATA_API_KEY")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"PINATA_SECRET_API_KEY")," for interfacing with the IPFS pinning service Pinata.")),(0,r.kt)("h2",{id:"2-main-build-and-pre-release-mainyml"},"2. Main Build and Pre-release (",(0,r.kt)("inlineCode",{parentName:"h2"},"main.yml"),")"),(0,r.kt)("p",null,"This action builds the Dappnode package and creates a pre-release that's ready to be published."),(0,r.kt)("h3",{id:"workflow-file-1"},"Workflow File:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Filename:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"main.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "Main"\non:\n  pull_request:\n  push:\n    branches:\n      - "main"\n      - "master"\n      - "v[0-9]+.[0-9]+.[0-9]+"\n    paths-ignore:\n      - "README.md"\n\njobs:\n  build-test:\n    runs-on: ubuntu-latest\n    name: Build test\n    if: github.event_name != \'push\'\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx @dappnode/dappnodesdk build --skip_save\n\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.event_name == \'push\'\n    steps:\n      - uses: actions/checkout@v3\n      - name: Publish\n        run: npx @dappnode/dappnodesdk publish patch --dappnode_team_preset\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DEVELOPER_ADDRESS: "0xf35960302a07022aba880dffaec2fdd64d5bf1c1"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Features:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Branch Filters"),": The action only triggers on the ",(0,r.kt)("inlineCode",{parentName:"li"},"main"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"master"),", and version tags (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"v1.0.0"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Paths Ignore"),": Ignores changes solely related to ",(0,r.kt)("inlineCode",{parentName:"li"},"README.md"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Conditional Runs"),": Different steps are executed based on the event that triggered the workflow (e.g., push event or pull request).")))}d.isMDXComponent=!0}}]);