"use strict";(self.webpackChunkd_app_node_docs=self.webpackChunkd_app_node_docs||[]).push([[120],{4137:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return t?o.createElement(h,i(i({ref:n},l),{},{components:t})):o.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var d=2;d<r;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var o=t(7462),a=(t(7294),t(4137));const r={},i="DappnodeSDK",p={unversionedId:"dev/sdk/overview",id:"dev/sdk/overview",title:"DappnodeSDK",description:"The DappnodeSDK dappnodesdk is a tool that makes creating and publishing new Dappnode packages as simple as possible. It helps to initialize, build, test, and publish the new package/repo to an APM tracked on the Ethereum Mainnet.",source:"@site/docs/dev/sdk/overview.md",sourceDirName:"dev/sdk",slug:"/dev/sdk/overview",permalink:"/docs/dev/sdk/overview",draft:!1,editUrl:"https://github.com/dappnode/DappnodeDocs/docs/dev/sdk/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"Introduction",permalink:"/docs/dev"},next:{title:"Main commands",permalink:"/docs/dev/sdk/commands"}},s={},d=[{value:"Command-line options",id:"command-line-options",level:2}],l={toc:d},c="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(c,(0,o.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dappnodesdk"},"DappnodeSDK"),(0,a.kt)("p",null,"The DappnodeSDK ",(0,a.kt)("inlineCode",{parentName:"p"},"dappnodesdk")," is a tool that makes creating and publishing new Dappnode packages as simple as possible. It helps to initialize, build, test, and publish the new package/repo to an APM tracked on the Ethereum Mainnet."),(0,a.kt)("p",null,"We have deployed a public APM (Aragon Package Manager) registry in which anyone can create their own APM repository: ",(0,a.kt)("a",{parentName:"p",href:"https://etherscan.io/address/public.dappnode.eth"},"public.dappnode.eth")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Demo GIF",src:t(4702).Z,width:"1049",height:"638"})),(0,a.kt)("h2",{id:"command-line-options"},"Command-line options"),(0,a.kt)("p",null,"DappnodeSDK is usually executed from the command line. The following are all the available commands. "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can run ",(0,a.kt)("inlineCode",{parentName:"p"},"dappnodesdk <command> help")," to get more information about each command.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Usage: dappnodesdk <command> [options]\n\nCommands:\n  build                   Build a new version (only generates the ipfs hash)\n  from_github [repoSlug]  Gets an existing DNP Github release (assets) and uploa\n                          d it to IPFS\n  increase [type]         Increases the version defined in the manifest\n  init                    Initialize a new DAppNodePackage (DNP) repository\n  next [type]             Compute the next release version from local\n  publish [type]          Publish a new version of the package in an Aragon Pack\n                          age Manager Repository\n  github-action           Github actions tooling to be run in CI. Uses a specifi\n                          c set of options for internal DAppNode use. Caution: o\n                          ptions may change without notice.\n\nOptions:\n      --dir, --directory   Change the base directory    [string] [default: "./"]\n      --compose_file_name  Compose file for docker-compose\n                                        [string] [default: "docker-compose.yml"]\n      --silent             Silence output to terminal                  [boolean]\n      --verbose, --debug   Show more output to terminal                [boolean]\n  -h, --help               Show help                                   [boolean]\n  -v, --version            Show version number                         [boolean]```\n')))}u.isMDXComponent=!0},4702:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/demo-3ae4e5dc0c026dfb372657f396712b72.gif"}}]);